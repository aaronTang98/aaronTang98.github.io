(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{519:function(s,n,a){"use strict";a.r(n);var t=a(6),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_1、流的介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、流的介绍"}},[s._v("#")]),s._v(" 1、流的介绍")]),s._v(" "),a("p",[s._v("流：从支持数据处理操作的源生成的元素序列。")]),s._v(" "),a("h1",{attrs:{id:"_2、流的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、流的特点"}},[s._v("#")]),s._v(" 2、流的特点")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("流只能遍历一次。")])]),s._v(" "),a("li",[a("p",[s._v("流的操作不会修改其数据源，而是会生成一个新的流。例如stream 的filter 操作会产生一个不包含被过滤元素的新的stream，而不是从source 删除哪些元素。")])]),s._v(" "),a("li",[a("p",[s._v("流的操作是惰性执行的，在需要其结果时才会执行，所以需要终止操作来产生结果，这个操作会强制执行之前的惰性操作。在使用终止操作之后这个流就不能使用了。")])]),s._v(" "),a("li",[a("p",[s._v("所有stream的操作必须以lambda 表达式为参数。")])]),s._v(" "),a("li",[a("p",[s._v("很容易生成数据或者List")])]),s._v(" "),a("li",[a("p",[s._v("当一个stream 是并行化的，就不需要再写多线程代码，所有对它的操作会自动并行执行。")])])]),s._v(" "),a("h1",{attrs:{id:"_3、流和集合的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、流和集合的区别"}},[s._v("#")]),s._v(" 3、流和集合的区别")]),s._v(" "),a("ol",[a("li",[s._v("集合是一个内存中的数据结构，它包含数据结构中的目前所有的值。")])]),s._v(" "),a("p",[s._v("集合中的每个元素都必须先算出来才能添加到集合中。")]),s._v(" "),a("p",[s._v("相比之下，流则是在概念上固定的数据结构（你不能添加和删除元素），其元素是按需计算的。")]),s._v(" "),a("p",[s._v("形象一点的例子是，集合就像存在本地硬盘上的电影，而流就像用流媒体看的电影。")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("集合和流的另外一个关键区别在于他们遍历数据的方式")])]),s._v(" "),a("p",[s._v("使用Collection 接口需要用户去做迭代（比如for-each）,这称为外部迭代。相反，Stream 库使用内部迭代（它帮你把迭代做了，还把流值存在了某个地方，你只需要给出一个函数告诉怎么做就可以了。stream库的内部迭代可以自动选择一种适合你的硬件数据表示和并行实现）")]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[s._v("集合有固定大小，流没有。")])]),s._v(" "),a("h1",{attrs:{id:"_4、流的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、流的组成"}},[s._v("#")]),s._v(" 4、流的组成")]),s._v(" "),a("p",[s._v("数据源（order） -> 中间操作（filter  ->  sorted  ->  map） -> 终端操作（ collect）")]),s._v(" "),a("h1",{attrs:{id:"_5、流操作的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、流操作的分类"}},[s._v("#")]),s._v(" 5、流操作的分类")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.中间操作")]),s._v(" "),a("ul",[a("li",[s._v("无状态操作")])])])]),s._v(" "),a("p",[s._v("​    - filter（过滤）")]),s._v(" "),a("p",[s._v("​    - map（映射）")]),s._v(" "),a("p",[s._v("​    - peek （遍历）")]),s._v(" "),a("p",[s._v("​    - flatMap （扁平化）")]),s._v(" "),a("ul",[a("li",[s._v("有状态操作")])]),s._v(" "),a("p",[s._v("​    - distinct（去重）")]),s._v(" "),a("p",[s._v("​    - sorted（排序）")]),s._v(" "),a("p",[s._v("​    - limit（截断）")]),s._v(" "),a("p",[s._v("​    - skip （跳过）")]),s._v(" "),a("p",[s._v("有状态操作需要在所有的数据基础上进行操作，而无状态操作只需要对当前数据进行操作和判断就可以了")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("2.终端操作")]),s._v(" "),a("ul",[a("li",[s._v("非短路操作")])])])]),s._v(" "),a("p",[s._v("​    - forEach（遍历）")]),s._v(" "),a("p",[s._v("​    - collect（聚合）")]),s._v(" "),a("p",[s._v("​    - reduce（归约）")]),s._v(" "),a("p",[s._v("​    - max（最大值）")]),s._v(" "),a("p",[s._v("​    - min（最小值）")]),s._v(" "),a("p",[s._v("​    - count（计数）")]),s._v(" "),a("ul",[a("li",[s._v("短路操作")])]),s._v(" "),a("p",[s._v("​    - allMatch（所有匹配）")]),s._v(" "),a("p",[s._v("​    - anyMatch（任意匹配）")]),s._v(" "),a("p",[s._v("​    - findFirst（查找首个）")]),s._v(" "),a("p",[s._v("​    - findAny（查找任意）")]),s._v(" "),a("p",[s._v("​    - noneMatch（不匹配）")]),s._v(" "),a("h1",{attrs:{id:"_5-过滤filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-过滤filter"}},[s._v("#")]),s._v(" 5. 过滤filter")]),s._v(" "),a("p",[s._v("过滤（filter）：用于通过设置的条件过滤出元素.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\nList<String>strings = Arrays.asList("a", "", "b", "cd", "abcd","");\n\n// 获取空字符串的数量\n\nlong count = strings.stream().filter(string -> string.isEmpty()).count();\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h1",{attrs:{id:"_6-映射map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-映射map"}},[s._v("#")]),s._v(" 6. 映射map")]),s._v(" "),a("p",[s._v("映射（map）方法用于映射每个元素到对应的结果. 即将一个元素转换为另一个元素。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n /**\n\n   * map使用：将一个元素转换成另一个元素\n\n   */\n\n  @Test\n\n  public void mapTest() {\n\n​    list.stream()\n\n​        .map(sku -> sku.getSkuName())\n\n​        .forEach(item ->\n\n​            System.out.println(\n\n​                JSON.toJSONString(\n\n​                    item, true)));\n\n  }\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h1",{attrs:{id:"_7-扁平化flatmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-扁平化flatmap"}},[s._v("#")]),s._v(" 7.扁平化flatmap")]),s._v(" "),a("p",[s._v("扁平化（flatmap）将一个元素映射到流")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n  /**\n\n   * flatMap使用：将一个对象转换成流\n\n   */\n\n  @Test\n\n  public void flatMapTest() {\n\n​    list.stream()\n\n​        .flatMap(sku -> Arrays.stream(\n\n​            sku.getSkuName().split("")))\n\n​        .forEach(item ->\n\n​            System.out.println(\n\n​                JSON.toJSONString(\n\n​                    item, true)));\n\n  }\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h1",{attrs:{id:"_8-peek-遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-peek-遍历"}},[s._v("#")]),s._v(" 8. peek 遍历")]),s._v(" "),a("p",[s._v("和foreach 遍历类似，区别在于流被他遍历后，还能被使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n  /**\n\n   * peek使用：对流中元素进行遍历操作，与forEach类似，但不会销毁流元素\n\n   */\n\n  @Test\n\n  public void peek() {\n\n​    list.stream()\n\n​        // peek\n\n​        .peek(sku -> System.out.println(sku.getSkuName()))\n\n​        .forEach(item ->\n\n​            System.out.println(\n\n​                JSON.toJSONString(\n\n​                    item, true)));\n\n  }\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("由上到下依次执行peek ,然后执行forEach.")]),s._v(" "),a("h1",{attrs:{id:"_9-排序sorted"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-排序sorted"}},[s._v("#")]),s._v(" 9.排序sorted")]),s._v(" "),a("p",[s._v("排序(sorted )方法用于对流进行排序")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n /**\n\n   * sort使用：对流中元素进行排序，可选则自然排序或指定排序规则。有状态操作\n\n   */\n\n  @Test\n\n  public void sortTest() {\n\n​    list.stream()\n\n​        .peek(sku -> System.out.println(sku.getSkuName()))\n\n​        //sort\n\n​        .sorted(Comparator.comparing(Sku::getTotalPrice))\n\n​        .forEach(item ->\n\n​            System.out.println(\n\n​                JSON.toJSONString(\n\n​                    item, true)));\n\n  }\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("#11. 限制limit")]),s._v(" "),a("p",[s._v("以下是分页操作的效果。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n  /**\n\n   * limit使用：截断前N条记录。有状态操作\n\n   */\n\n  @Test\n\n  public void limitTest() {\n\n​    list.stream()\n\n​        .sorted(Comparator.comparing(Sku::getTotalPrice))\n\n​        .skip(2 * 3)\n\n​        // limit\n\n​        .limit(3)\n\n​        .forEach(item ->\n\n​            System.out.println(\n\n​                JSON.toJSONString(\n\n​                    item, true)));\n\n  }\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h1",{attrs:{id:"_12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12"}},[s._v("#")]),s._v(" 12.")]),s._v(" "),a("h1",{attrs:{id:"_10-去重distinct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-去重distinct"}},[s._v("#")]),s._v(" 10.去重distinct")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n /**\n\n   * distinct使用：对流元素进行去重。有状态操作\n\n   */\n\n  @Test\n\n  public void distinctTest() {\n\n​    list.stream()\n\n​        .map(sku -> sku.getSkuCategory())\n\n​        .distinct()\n\n​        .forEach(item ->\n\n​            System.out.println(\n\n​                JSON.toJSONString(\n\n​                    item, true)));\n\n  }\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h1",{attrs:{id:"_11-跳过skip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-跳过skip"}},[s._v("#")]),s._v(" 11.跳过skip")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n/**\n\n   * skip使用：跳过前N条记录。有状态操作\n\n   */\n\n  @Test\n\n  public void skipTest() {\n\n​    list.stream()\n\n​        .sorted(Comparator.comparing(Sku::getTotalPrice))\n\n​        // skip\n\n​        .skip(3)\n\n​        .forEach(item ->\n\n​            System.out.println(\n\n​                JSON.toJSONString(\n\n​                    item, true)));\n\n  }\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h1",{attrs:{id:"_10-归约reduce和汇总collect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-归约reduce和汇总collect"}},[s._v("#")]),s._v(" 10. 归约reduce和汇总collect")]),s._v(" "),a("ul",[a("li",[s._v("归约（reduce）: 将Stream 流中的元素转换成一个值")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n将stream 流中元素转换成一个值\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("Stream<Integer> integerStream = Lists.newArrayList(1,2,3).stream();\n\n// 求最大值\nintegerStream.mapToInt(Integer::intValue).max();\n// 求最小值\nintegerStream.mapToInt(Integer::intValue).min();\n// 求和\nintegerStream.mapToInt(Integer::intValue).sum();\n")])])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("stream api的reduce方法用于对stream中元素进行聚合求值，最常见的用法就是将stream中一连串的值合成为单个值，比如为一个包含一系列数值的数组求和。")]),s._v(" "),a("p",[s._v("reduce方法有三个重载的方法，方法签名如下")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nOptional<T> reduce(BinaryOperator<T> accumulator);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nT reduce(T identity, BinaryOperator<T> accumulator);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n<U> U reduce(U identity,\n\n​         BiFunction<U, ? super T, U> accumulator,\n\n​         BinaryOperator<U> combiner);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("第一个签名方法接受一个BinaryOperator类型的lambada表达式， 常规应用方法如下")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nList<Integer> numList = Arrays.asList(1,2,3,4,5);\n\nint result = numList.stream().reduce((a,b) -> a + b ).get();\n\nSystem.out.println(result);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("代码实现了对numList中的元素累加。lambada表达式的a参数是表达式的执行结果的缓存，也就是表达式这一次的执行结果会被作为下一次执行的参数，而第二个参数b则是依次为stream中每个元素。如果表达式是第一次被执行，a则是stream中的第一个元素。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\nint result = numList.stream().reduce((a,b) -> {\n\n System.out.println("a=" + a + ",b=" + b);\n\n return a + b;\n\n} ).get();\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\na=1,b=2\n\na=3,b=3\n\na=6,b=4\n\na=10,b=5\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("表达式被调用了4次， 第一次a和b分别为stream的第一和第二个元素，因为第一次没有中间结果可以传递， 所以 reduce方法实现为直接将第一个元素作为中间结果传递。")]),s._v(" "),a("ul",[a("li",[s._v("第二个签名方法与第一个签名的实现的唯一区别是它首次执行时表达式第一次参数并不是stream的第一个元素，而是通过签名的第一个参数identity来指定。我们来通过这个签名对之前的求和代码进行改进")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nList<Integer> numList = Arrays.asList(1,2,3,4,5);\n\nint result = numList.stream().reduce(0,(a,b) -> a + b );\n\nSystem.out.println(result);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("其实这两种实现几乎差别，第一种比第一种仅仅多了一个字定义初始值罢了。 此外，因为存在stream为空的情况，所以第一种实现并不直接方法计算的结果，而是将计算结果用Optional来包装，我们可以通过它的get方法获得一个Integer类型的结果，而Integer允许null。第二种实现因为允许指定初始值，因此即使stream为空，也不会出现返回结果为null的情况，当stream为空，reduce为直接把初始值返回。")]),s._v(" "),a("p",[s._v("第三种签名的用法相较前两种稍显复杂，其实前两种实现有一个缺陷，它们的计算结果必须和stream中的元素类型相同，如上面的代码示例，stream中的类型为int，那么计算结果也必须为int，这导致了灵活性的不足，甚至无法完成某些任务， 比入我们咬对一个一系列int值求和，但是求和的结果用一个int类型已经放不下，必须升级为long类型，此实第三种签名就能发挥价值了，它不将执行结果与stream中元素的类型绑死。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nList<Integer> numList = Arrays.asList(Integer.MAX_VALUE,Integer.MAX_VALUE);\n\nlong result = numList.stream().reduce(0L,(a,b) -> a + b, (a,b)-> 0L );\n\nSystem.out.println(result);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("如上代码所示，它能见int类型的列表合并成long类型的结果。")]),s._v(" "),a("p",[s._v("当然这只是其中一种应用罢了，犹豫拜托了类型的限制我们还可以通过他来灵活的完成许多任务，比入将一个int类型的ArrayList转换成一个String类型的ArrayList")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\nList<Integer> numList = Arrays.asList(1, 2, 3, 4, 5, 6);\n\nArrayList<String> result = numList.stream().reduce(new ArrayList<String>(), (a, b) -> {\n\n  a.add("element-" + Integer.toString(b));\n\n  return a;\n\n}, (a, b) -> null);\n\nSystem.out.println(result);\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n​    //准备数据\n\n​    ArrayList<Order> list = Lists.newArrayList();\n\n​    list.add(new Order(1, 2, 25.12));\n\n​    list.add(new Order(2, 5, 257.23));\n\n​    list.add(new Order(3, 3, 23332.12));\n\n​    // 汇总商品数量和总金额\n\n​    Order order = list.stream()\n\n​        .parallel()\n\n​        .reduce(\n\n​            // 初始化值\n\n​            new Order(0, 0, 0.0),\n\n​            // Stream中两个元素的计算逻辑\n\n​            (Order order1, Order order2) -> {\n\n​              System.out.println("执行 计算逻辑 方法！！！");\n\n​              int productCount =\n\n​                  order1.getProductCount()\n\n​                      + order2.getProductCount();\n\n​              double totalAmount =\n\n​                  order1.getTotalAmount()\n\n​                      + order2.getTotalAmount();\n\n​              return new Order(0, productCount, totalAmount);\n\n​            },\n\n​            // 并行情况下，多个并行结果如何合并\n\n​            (Order order1, Order order2) -> {\n\n​              System.out.println("执行 合并 方法！！！");\n\n​              int productCount =\n\n​                  order1.getProductCount()\n\n​                      + order2.getProductCount();\n\n​              double totalAmount =\n\n​                  order1.getTotalAmount()\n\n​                      + order2.getTotalAmount();\n\n​              return new Order(0, productCount, totalAmount);\n\n​            });\n\n​    System.out.println(JSON.toJSONString(order, true));\n\n  }\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br")])]),a("ul",[a("li",[s._v("汇总（collect）：将Stream 流中的元素转换成一个容器")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);